#!/usr/bin/ruby
require 'rubygems'
require 'ruby-progressbar'
require 'optparse'
require 'pp'
require 'imageStreamParser'

options = {}
OptionParser.new do |opts|
  opts.banner = "Usage: save-images.rb [options]"

  opts.on('-n', '--number COUNT=10', Integer,  'Number of images per tarball.') { |v| options[:n] = v }
  opts.on('-f', '--filename FNAME', 'File containing image names. Defaults to running imageStreamParser.') { |v| options[:fname] = v }
  opts.on('-o', '--output FNAME=./isdumpN', 'File to output tarballs') { |v| options[:output] = v }
  opts.on('-d', '--dryrun', 'Just output commands, don\'t run.') { options[:dryrun] = true }
  opts.on('-v', '--verbose', 'Verbose output') { options[:verbose] = true }
  opts.on('-h', '--help', 'Prints this help.') { puts opts; exit }

end.parse!


streams=[]
options[:fname] != NIL ? streams << options[:fname] : streams=[]
options[:n] != NIL ? n = options[:n] : n=10
options[:output] != NIL ? output = options[:output] : output="./isdump"

streams.each do |stream|
  if !File.exist?(stream) then
    printf("File %s not found!\n\n", stream)
    exit
  end
end


imagestreams = [];
if streams==[] then
  parser = ImageStreamParser.new
  if parser.verifyStreams() then
    imagestreams = parser.dumpStreams(tty=false)
  else
    exit
  end

else
  file = File.new(streams[0],'r')
  while (line = file.gets)
    imagestreams.push(line)
  end
  file.close
end

 
i = 0
c=1.0

cmd_save = ""
cmd_clean = ""
cmd_tar = ""
cmd_make = "mkdir -p #{output}TMP/"

options[:dryrun] ? printf("  SYSTEM: %s\n",cmd_make) : system(cmd_make);
bar = ProgressBar.create(:format => '%t |%b>>%i| [%c/%C]', :title=> "Downloading", :total => imagestreams.size + 1)


imagestreams.each do | image |
  is_name=image.scan(/.*?\/(.*):.*$/).last.first.sub('/','_')
  is_tag=image.scan(/.*?\/.*:(.*)$/).last.first

  if File.file?("#{output}TMP/#{is_name}-#{is_tag}.tar") then
    cmd_save = "echo Cowardly refusing to create #{output}TMP/#{is_name}-TAGGED-#{is_tag}.tar, File exists." 
  else
    cmd_save = "skopeo copy docker://#{image} docker-archive:#{output}TMP/#{is_name}_TAGGED_#{is_tag}.tar:#{image}"
    cmd_save = cmd_save + " >> /dev/null" if !options[:verbose]
  end
  
  options[:dryrun] ? printf("  SYSTEM: %s\n",cmd_save) : system(cmd_save);


  if ((i % n) == 0) then
    c = (i / n)+1

#printf("Creating tarball %d: isdump%d.tar.gz\n", c, c);
    create_fname = "#{output}#{c}.tar.gz"
    
    cmd_clean = "rm -rf #{output}TMP/"

    # escape out if tarballs already exist!
    if File.file?(create_fname)
      cmd_tar = "echo Cowardly refusing to create #{create_fname}, File exists." 
    else
      cmd_tar = "tar -zcf #{create_fname} #{output}TMP/ --transform 's%#{output}TMP/%%'"

    end
    if i > 0 then
    bar.title="Compressing."
      options[:dryrun] ? printf("  SYSTEM: %s\n",cmd_tar) : system(cmd_tar);
      options[:dryrun] ? printf("  SYSTEM: %s\n",cmd_clean) : system(cmd_clean);
      options[:dryrun] ? printf("  SYSTEM: %s\n",cmd_make) : system(cmd_make);
    bar.title="Downloading."
    end
  end


  i = i + 1

  if options[:verbose] then
    puts "#{image}"
  end
  bar.increment

end

bar.title="Compressing."
options[:dryrun] ? printf("  SYSTEM: %s\n",cmd_tar) : system(cmd_tar);
bar.increment
options[:dryrun] ? printf("  SYSTEM: %s\n",cmd_clean) : system(cmd_clean);

#File.open("#{output}/is.txt", "w+") do |f|
#  imagestreams.each { |element| f.puts(element) }
#end

bar.title="All finished."
puts "\n"



